Here’s a tight, copy-paste Replit Agent prompt that gets you exactly what you want—and makes the agent show you a plan for approval before touching files.

⸻

Replit Agent Prompt (paste this)

You are upgrading a small Node/Express site for Skyla.
First, reply with a short plan + file tree diff for approval. Do not modify any files yet.

Goals
	1.	Keep the current console UI but move it to /demo.
	2.	Add a new minimal homepage at / that matches the screenshot style (beige hero + dark “Proof” card).
	3.	Swap the console header logo block for the provided Skyla mark image.
	4.	Create simple pages at /docs and /sign-in.
	5.	Serve everything from an Express server so routes work without “.html”.

Source assets (place in public/assets/)
	•	skyla-mark.png — (use the provided brand mark)
	•	proof-hero.png — (the dark “Proof” card image)
	•	symbolic-imprint.png, stack.png, identity-recursion.png — for /docs (optional: if missing, keep <img> tags but don’t fail)

After I approve the plan, implement these:

1) Server

Create server.js and package.json (ESM) if missing.

server.js

import express from "express";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const app = express();
const PORT = process.env.PORT || 5000;

// static files
app.use(express.static(path.join(__dirname, "public")));

// routes
app.get("/", (_, res) => res.sendFile(path.join(__dirname, "public", "index.html")));
app.get("/demo", (_, res) => res.sendFile(path.join(__dirname, "public", "demo.html")));
app.get("/docs", (_, res) => res.sendFile(path.join(__dirname, "public", "docs.html")));
app.get("/sign-in", (_, res) => res.sendFile(path.join(__dirname, "public", "sign-in.html")));

app.listen(PORT, () => console.log(`Skyla site running on http://localhost:${PORT}`));

package.json

{
  "name": "skyla-site",
  "type": "module",
  "scripts": { "start": "node server.js" },
  "dependencies": { "express": "^4.19.2" }
}

2) Public files & structure

/public
  index.html      <- NEW homepage
  demo.html       <- the existing console UI (v7) moved here
  docs.html       <- docs landing page
  sign-in.html    <- simple sign-in form
  /assets
    skyla-mark.png
    proof-hero.png
    symbolic-imprint.png
    stack.png
    identity-recursion.png

3) Homepage (public/index.html)
	•	Beige background, serif headline: “Design agency, then prove it.”
	•	Kicker: “The logic layer for verifiable agents.”
	•	Right column: dark “Proof” card showing an image (/assets/proof-hero.png) and a “Verify” button linking to /demo.
	•	Top-right nav: Demo / Docs / Sign in
	•	Brand left: skyla.dev + skyla-mark.png.

(Use the minimal, inline-CSS version; no frameworks.)

4) Console Demo (public/demo.html)
	•	Start from the working v7 console UI.
	•	In the header, replace the old logo block with:

<img class="logo-img" src="/assets/skyla-mark.png" alt="Skyla mark" />

	•	Keep all existing JS exactly as v7 (including calculateSemanticTransition).
	•	Ensure nav or a simple “Back to Home” link is present if helpful.

5) Docs (public/docs.html)
	•	Clean docs page with sticky left sidebar and anchors:
	•	Overview
	•	Architecture
	•	Symbolic imprint (include schema JSON block)
	•	State & proofs (include proof envelope example)
	•	API (alpha) with sample request/response
	•	FAQ
	•	Use images:
	•	/assets/stack.png
	•	/assets/symbolic-imprint.png
	•	/assets/identity-recursion.png
	•	If assets are missing, render page without breaking.

6) Sign in (public/sign-in.html)
	•	Minimal centered card: email + password + “Sign In” button.
	•	Same beige background, subtle shadow.

Acceptance Criteria
	•	npm start launches Express on port 5000.
	•	/ renders the new homepage (hero + proof card, “Get started/Verify” → /demo).
	•	/demo renders the working console UI; symbolic & semantic paths still work; no console JS errors.
	•	Header in /demo shows skyla-mark.png instead of the old block.
	•	/docs loads with sidebar + sections and images (or placeholders if files absent).
	•	/sign-in shows a basic, styled sign-in form.
	•	All pages share the brand vibe (beige background, black type).
	•	File tree matches the structure above.

Before making changes
	1.	Reply with:
	•	A concise plan (bullet list, ≤10 bullets).
	•	The proposed file tree diff.
	2.	Wait for my approval.

After approval, implement, run the server, and report:
	•	The final file tree,
	•	Any noteworthy decisions,
	•	A quick manual test log (URLs visited + status),
	•	Any TODOs you recommend next (e.g., active-section highlight in docs).

⸻

Use this exact spec.