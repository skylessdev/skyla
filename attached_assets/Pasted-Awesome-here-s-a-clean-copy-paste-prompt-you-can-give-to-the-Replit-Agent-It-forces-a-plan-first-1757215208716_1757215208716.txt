Awesome — here’s a clean, copy-paste prompt you can give to the Replit Agent. It forces a plan-first step, lists exact requirements for v7, and includes crisp acceptance criteria + verification steps.

⸻

Prompt for Replit Agent

Context: Build a minimal, clean “Skyla Console State Transition UI” as a single-file HTML app (exactly v7 spec). First, propose a plan and wait for my approval. After I approve, implement.

Scope
	•	Single deliverable: index.html (inline CSS + JS; no external assets or libs).
	•	Aesthetic: clean, minimal, beige background #f5f4f0, dark text #1a1a1a, console window in dark gray/black, not cyberpunk.
	•	Functionality: console-style log with timestamps, levels, JSON blocks; input field; live identity vector.

Must Implement (match v7 exactly)
	1.	UI structure
	•	Header: logo block (rounded square with small inner square/circle accents), title “Skyla”, tagline “Cryptographically verified symbolic AI agent”.
	•	“Browser console” panel with header (3 dots: red/yellow/green) + title skyla.console, and a scrollable body for logs.
	•	Input section: text field + Submit button.
	•	State panel: label “Current Identity Vector:” + text value [0.5, 0.5, 0.5, 0.5].
	2.	Styling (inline)
	•	Body: font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace; background #f5f4f0; color #1a1a1a.
	•	Console: dark background #1a1a1a, header #333, dots (#ff5f56, #ffbd2e, #27ca3f).
	•	Log line animation: subtle fade-in / translateY; syntax highlighting classes: .key, .string, .number, .boolean.
	3.	State & rules (JS)
	•	currentState = { identityVector:[0.5,0.5,0.5,0.5], mode:"standard", protocols:["basic_response"], stateHash:"0xabc123" }.
	•	symbolicRules with exact entries:
	•	"spiral" → mode "adaptive", tone "analytical", protocols ["tone_guard","emotional_stabilizer"], vectorAdjustment [0.1, 0.2, 0.3, 0.0]
	•	"daemon" → mode "daemon", tone "protective", protocols ["daemonwatch","system_monitor"], vectorAdjustment [0.0, 0.1, -0.05, 0.0]
	•	"build" → mode "builder", tone "focused", protocols ["project_manager","resource_optimizer"], vectorAdjustment [0.2, -0.1, 0.1, 0.15]
	•	"analyze" → mode "analytical", tone "precise", protocols ["data_processor","pattern_detector"], vectorAdjustment [0.3, 0.0, 0.05, 0.1]
	4.	Semantic transition
	•	Implement calculateSemanticTransition(input, currentVec):
	•	Check regex categories first and apply small deltas (examples):
	•	stress: /overwhelm|stress|anxio|panic|burnout|tired/ → [+0.05, +0.15, +0.10, -0.02]
	•	focus:  /focus|concentrat|build|ship|execute|implement|deliver/ → [+0.12, -0.05, +0.08, +0.10]
	•	analysis:/analy[sz]e|reason|logic|evaluate|precise|assess|measure/ → [+0.15, -0.02, +0.05, +0.08]
	•	protect: /protect|guard|safe|defend|daemon|monitor/ → [+0.00, +0.08, -0.03, +0.04]
	•	create:  /create|design|invent|imag(in|e)|idea|explore|brainstorm|prototype/ → [+0.07, +0.06, +0.12, +0.03]
	•	Else fallback to deterministic tiny deltas via simple string hash → map to [-0.05, +0.05] per dimension.
	•	Clamp all vector values to [0, 1].
	•	Expose calculateSemanticTransition so typeof calculateSemanticTransition returns "function" at runtime.
	5.	Console logging
	•	addLogLine(level, message, data?) appends a line with timestamp, level (INFO/SUCCESS/WARNING/ERROR), message, and pretty-printed JSON with syntax highlight via .replace() for keys, strings, numbers, booleans.
	•	Initial logs (with small delays):
	•	“Symbolic engine loaded”
	•	“Identity vector initialized” (log full currentState object)
	•	“Ready for symbolic input”
	•	“Semantic function status” (log { typeof_calculateSemanticTransition: 'function' })
	6.	Processing flow
	•	On submit/Enter:
	•	If exact rule match → apply vectorAdjustment, mark ruleType "symbolic"; set mode, tone, protocols from rule.
	•	Else → call calculateSemanticTransition; mark ruleType "semantic";
	•	Compute vectorDelta; pick dominant dimension (max abs delta).
	•	Map dimension index to mode via ['analytical','adaptive','creative','coherent'].
	•	tone = 'empathetic' if emotional delta > 0.1, else 'analytical' if cognitive delta > 0.1, else 'balanced'.
	•	protocols = [\${mode}_processing`, ‘contextual_adaptation’]`.
	•	Generate mock proof (previous/current hashes via Math.random().toString(16).substring(2,10)), include ruleApplied, inputTrigger, zkProof, timestamp.
	•	Update currentState, update on-page vector with 2-decimal rounding, and append “State transition complete”.
	7.	UX niceties
	•	Disable Submit while processing; re-enable after completion.
	•	Enter key submits.

⸻

Acceptance Criteria (verify in browser)
	1.	One file index.html only.
	2.	Visuals match the specified styling (beige background, dark console w/ dots, monospace).
	3.	Typing daemon shows symbolic path and updates vector to [0.5, 0.6, 0.45, 0.5] (from initial).
	4.	Typing I'm overwhelmed with work shows semantic path (stress category) with delta approx [+0.05, +0.15, +0.10, -0.02]; tone likely empathetic.
	5.	Typing random tuesday thoughts uses deterministic fallback (stable tiny deltas for same input).
	6.	Proof logs appear for each transition with previous/new hashes, ruleApplied, inputTrigger, zkProof, ISO timestamp.
	7.	Runtime console has no errors.

⸻

Plan-first request (do this before coding)

Please reply with a short plan:
	•	The single file you’ll create (index.html).
	•	The key implementation steps in order (UI → CSS → JS state/rules → semantic function → proof logs → wiring).
	•	How you’ll verify each Acceptance Criterion (brief manual test steps).

Wait for my approval before implementing. After approval, proceed, then share a brief test transcript (symbolic, semantic, fallback) from the Replit webview.