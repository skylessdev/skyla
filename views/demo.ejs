<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Skyla - Console Interface</title>
  <style>
    * { margin:0; padding:0; box-sizing:border-box; }
    body {
      font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      background:#f5f4f0; color:#1a1a1a; line-height:1.4;
    }
    
    /* Keep console and code elements monospace */
    .console, .console *, .vector-display, input[type="text"], button {
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace !important;
    }
    .container { max-width:1200px; margin:0 auto; padding:40px 20px; }
    .header { text-align:center; margin-bottom:40px; }
    .logo { width:80px; height:80px; margin:0 auto 20px; display:flex; align-items:center; justify-content:center; }
    .logo img { width: 100%; height: 100%; object-fit: contain; }
    h1 { font-size:48px; font-weight:600; color:#1a1a1a; letter-spacing:-0.02em; margin-bottom:10px; }
    .tagline { font-size:18px; color:#666; font-weight:400; }
    .console { background:#1a1a1a; border-radius:12px; overflow:hidden; box-shadow:0 8px 32px rgba(0,0,0,0.1); margin-bottom:30px; }
    .console-header { background:#333; padding:12px 20px; display:flex; align-items:center; gap:8px; }
    .console-dot { width:12px; height:12px; border-radius:50%; }
    .dot-red { background:#ff5f56; } .dot-yellow { background:#ffbd2e; } .dot-green { background:#27ca3f; }
    .console-title { color:#ccc; font-size:14px; margin-left:10px; }
    .console-body { padding:20px; font-size:14px; height:400px; overflow-y:auto; }
    .log-line { margin-bottom:8px; display:flex; align-items:flex-start; opacity:0; animation:fadeIn 0.5s ease-out forwards; }
    .log-line:nth-child(n+2){animation-delay:0.5s;} .log-line:nth-child(n+3){animation-delay:1s;}
    .log-line:nth-child(n+4){animation-delay:1.5s;} .log-line:nth-child(n+5){animation-delay:2s;}
    .log-line:nth-child(n+6){animation-delay:2.5s;}
    @keyframes fadeIn { from{opacity:0; transform:translateY(10px);} to{opacity:1; transform:translateY(0);} }
    .timestamp { color:#666; margin-right:10px; font-size:12px; min-width:80px; }
    .log-level { margin-right:10px; font-weight:600; min-width:60px; }
    .info{color:#4a9eff;} .success{color:#27ca3f;} .warning{color:#ffbd2e;} .error{color:#ff5f56;}
    .log-message { flex:1; color:#e6e6e6; }
    .json-object { 
      color:#7dd3fc; 
      margin-left:20px; 
      white-space:pre-wrap; 
      max-height:none; 
      overflow:visible; 
      word-wrap:break-word; 
      word-break:break-word; 
    }
    .key{color:#fbbf24;} .string{color:#34d399;} .number{color:#f472b6;} .boolean{color:#a78bfa;}
    
    /* Integrity indicator styles */
    .integrity-high{color:#10b981;} .integrity-medium{color:#f59e0b;} .integrity-low{color:#ef4444;}
    .integrity-indicator { 
      display: inline-block; 
      width: 8px; 
      height: 8px; 
      border-radius: 50%; 
      margin-right: 6px; 
      vertical-align: middle; 
    }
    .integrity-high-bg { background: #10b981; }
    .integrity-medium-bg { background: #f59e0b; }
    .integrity-low-bg { background: #ef4444; }
    .consensus-bar {
      display: inline-block;
      width: 40px;
      height: 4px;
      background: #333;
      border-radius: 2px;
      margin-left: 8px;
      position: relative;
      vertical-align: middle;
    }
    .consensus-fill {
      height: 100%;
      border-radius: 2px;
      transition: width 0.3s ease;
    }
    
    .input-section { background:#fff; border-radius:12px; padding:20px; box-shadow:0 4px 16px rgba(0,0,0,0.06); }
    .input-group { display:flex; gap:12px; align-items:center; }
    input[type="text"] { flex:1; padding:12px 16px; border:2px solid #e5e5e5; border-radius:8px; font-size:16px; font-family:inherit; background:#f9f9f9; transition:all 0.2s ease; }
    input[type="text"]:focus { outline:none; border-color:#1a1a1a; background:#fff; }
    button { padding:12px 24px; background:#1a1a1a; color:#fff; border:none; border-radius:8px; font-size:16px; font-weight:500; cursor:pointer; transition:all 0.2s ease; font-family:inherit; }
    button:hover { background:#333; }
    button:disabled { background:#ccc; cursor:not-allowed; }
    .test-btn { padding:8px 12px; font-size:12px; background:#666; margin:2px; }
    .test-btn:hover { background:#888; }
    .state-info { background:#fff; border-radius:12px; padding:20px; margin-top:20px; box-shadow:0 4px 16px rgba(0,0,0,0.06); }
    .current-state { font-size:14px; color:#666; margin-bottom:10px; }
    .vector-display { font-family:'SF Mono', Monaco, monospace; font-size:18px; color:#1a1a1a; background:#f5f4f0; padding:12px; border-radius:6px; letter-spacing:0.5px; }
    
    /* Ultra-compact vector bars */
    .vector-compact {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
      margin-top: 8px;
      font-size: 11px;
    }
    
    .vector-item {
      display: flex;
      align-items: center;
      gap: 2px;
    }
    
    .vector-label {
      font-size: 9px;
      color: #666;
      font-weight: 600;
      min-width: 12px;
      font-family: 'SF Mono', Monaco, monospace;
    }
    
    .micro-bar {
      width: 20px;
      height: 3px;
      background: #e5e5e5;
      border-radius: 1.5px;
      overflow: hidden;
    }
    
    .micro-bar-fill {
      height: 100%;
      background: #4a9eff;
      border-radius: 1.5px;
      transition: width 0.3s ease;
    }
    
    @media (max-width: 640px) {
      .vector-compact {
        gap: 4px;
      }
      .micro-bar {
        width: 16px;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  
  <div class="container">
    <div class="header">
      <div class="logo"><img src="/assets/icon.png" alt="Skyla Logo" /></div>
      <h1>Skyla</h1>
      <p class="tagline">Cryptographically verified symbolic AI agent</p>
    </div>

    <div class="console">
      <div class="console-header">
        <div class="console-dot dot-red"></div>
        <div class="console-dot dot-yellow"></div>
        <div class="console-dot dot-green"></div>
        <div class="console-title">skyla.console</div>
      </div>
      <div class="console-body" id="console-body">
        <div class="log-line">
          <span class="timestamp">09:41:23</span>
          <span class="log-level info">INFO</span>
          <span class="log-message">Skyla initialized with default state</span>
        </div>
      </div>
    </div>

    <div class="input-section">
      <div class="input-group">
        <input type="text" id="user-input" placeholder="Enter symbolic phrase (e.g., 'spiral', 'daemon', 'build')" />
        <button onclick="processInput()" id="submit-btn">Submit</button>
      </div>
    </div>

    <div class="state-info">
      <div class="current-state">Current Identity Vector:</div>
      <div class="vector-display" id="vector-display">[0.5, 0.5, 0.5, 0.5]</div>
      <div class="vector-compact" id="vector-compact">
        <div class="vector-item">
          <span class="vector-label">C</span>
          <div class="micro-bar"><div class="micro-bar-fill" style="width: 50%"></div></div>
        </div>
        <div class="vector-item">
          <span class="vector-label">E</span>
          <div class="micro-bar"><div class="micro-bar-fill" style="width: 50%"></div></div>
        </div>
        <div class="vector-item">
          <span class="vector-label">A</span>
          <div class="micro-bar"><div class="micro-bar-fill" style="width: 50%"></div></div>
        </div>
        <div class="vector-item">
          <span class="vector-label">Co</span>
          <div class="micro-bar"><div class="micro-bar-fill" style="width: 50%"></div></div>
        </div>
      </div>
    </div>

  </div>

  <script>
    // ------------------ STATE ------------------
    let currentState = {
      identityVector: [0.5, 0.5, 0.5, 0.5],
      mode: "standard",
      protocols: ["basic_response"],
      stateHash: "0xabc123"
    };

    // ------------------ HELPERS + SEMANTICS (GLOBAL) ------------------
    function clamp01(x) { return Math.max(0, Math.min(1, x)); }

    // GLOBAL function declaration (hoisted & on window)
    function calculateSemanticTransition(input, currentVec) {
      const text = (input || "").toLowerCase();

      const categories = [
        { keys: [/overwhelm|stress|anxio|panic|burnout|tired/],   delta: [0.05, 0.15, 0.10, -0.02] },
        { keys: [/focus|concentrat|build|ship|execute|implement|deliver/], delta: [0.12, -0.05, 0.08, 0.10] },
        { keys: [/analy[sz]e|reason|logic|evaluate|precise|assess|measure/], delta: [0.15, -0.02, 0.05, 0.08] },
        { keys: [/protect|guard|safe|defend|daemon|monitor/],     delta: [0.00, 0.08, -0.03, 0.04] },
        { keys: [/create|design|invent|imag(in|e)|idea|explore|brainstorm|prototype/], delta: [0.07, 0.06, 0.12, 0.03] },
      ];

      for (const cat of categories) {
        if (cat.keys.some(rx => rx.test(text))) {
          return currentVec.map((v, i) => clamp01(v + cat.delta[i]));
        }
      }

      // Deterministic fallback (stable micro-deltas)
      let h = 0;
      for (let i = 0; i < text.length; i++) {
        h = ((h << 5) - h) + text.charCodeAt(i);
        h |= 0;
      }
      const deltas = [0,1,2,3].map(k => {
        const byte = (h >> ((k * 8) % 24)) & 0xff;
        return ((byte / 255) - 0.5) * 0.10; // [-0.05, 0.05]
      });
      return currentVec.map((v, i) => clamp01(v + deltas[i]));
    }

    // Optional: make explicit on window for sanity in odd script contexts
    window.calculateSemanticTransition = calculateSemanticTransition;
    
    // Update vector display with compact bars
    function updateVectorDisplay(vector) {
      const labels = ['C', 'E', 'A', 'Co'];
      
      document.getElementById('vector-display').textContent = 
        `[${vector.map(v => v.toFixed(2)).join(', ')}]`;
      
      const compactHtml = vector.map((value, i) => 
        `<div class="vector-item">
          <span class="vector-label">${labels[i]}</span>
          <div class="micro-bar"><div class="micro-bar-fill" style="width: ${value * 100}%"></div></div>
        </div>`
      ).join('');
      
      document.getElementById('vector-compact').innerHTML = compactHtml;
    }

    // ------------------ SYMBOLIC RULES ------------------
    const symbolicRules = {
      "spiral":  { mode:"adaptive",   tone:"analytical", protocols:["tone_guard","emotional_stabilizer"], vectorAdjustment:[0.1, 0.2, 0.3, 0.0] },
      "daemon":  { mode:"daemon",     tone:"protective", protocols:["daemonwatch","system_monitor"],      vectorAdjustment:[0.0, 0.1,-0.05,0.0] },
      "build":   { mode:"builder",    tone:"focused",    protocols:["project_manager","resource_optimizer"],vectorAdjustment:[0.2,-0.1, 0.1,0.15] },
      "analyze": { mode:"analytical", tone:"precise",    protocols:["data_processor","pattern_detector"], vectorAdjustment:[0.3, 0.0, 0.05,0.1] }
    };

    // ------------------ UI HELPERS ------------------
    function getTimestamp() {
      return new Date().toLocaleTimeString('en-US', { hour12:false });
    }

    function addLogLine(level, message, data = null) {
      const consoleBody = document.getElementById('console-body');
      const logLine = document.createElement('div');
      logLine.className = 'log-line';

      let content = `
        <span class="timestamp">${getTimestamp()}</span>
        <span class="log-level ${level}">${level.toUpperCase()}</span>
        <span class="log-message">${message}</span>
      `;

      if (data) {
        // Enhanced JSON display with no truncation
        const jsonString = JSON.stringify(data, null, 2);
        console.log('JSON display length:', jsonString.length); // Debug logging
        content += `<div class="json-object">${jsonString
          .replace(/"([^"]+)":/g, '<span class="key">"$1":</span>')
          .replace(/: "([^"]+)"/g, ': <span class="string">"$1"</span>')
          .replace(/: ([0-9.-]+)/g, ': <span class="number">$1</span>')
          .replace(/: (true|false)/g, ': <span class="boolean">$1</span>')
        }</div>`;
      }

      logLine.innerHTML = content;
      consoleBody.appendChild(logLine);
      consoleBody.scrollTop = consoleBody.scrollHeight;
    }

    function generateMockHash() {
      return "0x" + Math.random().toString(16).substring(2, 10);
    }

    // ------------------ CORE FLOW ------------------
    function processInput() {
      const input = document.getElementById('user-input').value.trim();
      const inputLower = input.toLowerCase();
      if (!input) return;

      document.getElementById('submit-btn').disabled = true;
      addLogLine('info', `Processing user input: "${input}"`);

      setTimeout(() => {
        const exactRule = symbolicRules[inputLower];
        let newVector, ruleType, protocols, mode, tone;

        if (exactRule) {
          newVector = currentState.identityVector.map((val, i) =>
            Math.max(0, Math.min(1, val + exactRule.vectorAdjustment[i]))
          );
          ruleType = 'symbolic';
          mode = exactRule.mode;
          tone = exactRule.tone;
          protocols = exactRule.protocols;

          addLogLine('success', 'Exact symbolic trigger detected', {
            trigger: inputLower, rule: exactRule.mode, ruleType: 'symbolic'
          });
        } else {
          // ✅ Semantic path now defined
          newVector = calculateSemanticTransition(input, currentState.identityVector);
          ruleType = 'semantic';

          const vectorDelta = newVector.map((v, i) => v - currentState.identityVector[i]);
          const maxChange = Math.max(...vectorDelta.map(Math.abs));
          const dominantIndex = vectorDelta.findIndex(v => Math.abs(v) === maxChange);

          const modeMapping = ['analytical', 'adaptive', 'creative', 'coherent'];
          mode = modeMapping[dominantIndex] || 'adaptive';
          tone = vectorDelta[1] > 0.1 ? 'empathetic' : vectorDelta[0] > 0.1 ? 'analytical' : 'balanced';
          protocols = [`${mode}_processing`, 'contextual_adaptation'];

          addLogLine('success', 'Semantic pattern recognized', {
            vectorChange: vectorDelta.map(v => v.toFixed(3)),
            dominantDimension: ['cognitive', 'emotional', 'adaptive', 'coherence'][dominantIndex],
            ruleType: 'semantic'
          });
        }

        const previousHash = currentState.stateHash;
        const newHash = generateMockHash();

        setTimeout(() => {
          addLogLine('info', 'Generating state transition proof...');

          setTimeout(() => {
            const transitionProof = {
              previousStateHash: previousHash,
              currentStateHash: newHash,
              ruleApplied: ruleType === 'symbolic' ? `${inputLower}_response_pattern` : 'semantic_adaptation',
              inputTrigger: ruleType === 'symbolic' ? `${inputLower}_detected` : 'natural_language_processing',
              ruleType: ruleType,
              zkProof: generateMockHash(),
              claudeIntegrationReady: true,
              proofVersion: "v2.0_claude_verified",
              timestamp: new Date().toISOString()
            };

            addLogLine('success', 'ZK proof generated', transitionProof);

            // Update state before Claude processing
            currentState = {
              identityVector: newVector,
              mode: mode,
              protocols: protocols,
              stateHash: newHash
            };

            updateVectorDisplay(newVector);

            // Add Multi-Model Claude processing
            setTimeout(() => {
              addLogLine('info', 'Initiating 2-model consensus analysis...');
              
              // Send to Claude API
              fetch('/api/claude', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  input: input,
                  currentState: currentState
                })
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  // Display integrity analysis results
                  const integrityClass = `integrity-${data.integrity}`;
                  const integrityScore = data.metadata.integrityScore || 0.5;
                  const consensusPercent = Math.round(integrityScore * 100);
                  
                  setTimeout(() => {
                    addLogLine('success', '2-model consensus analysis complete', {
                      integrityScore: integrityScore.toFixed(3),
                      consensusStrength: `${consensusPercent}%`,
                      modelsUsed: data.metadata.enhancedProof?.modelsUsed || ['claude-3-haiku'],
                      divergenceMetrics: data.metadata.divergenceMetrics,
                      architecture: 'Haiku vs Sonnet'
                    });
                  }, 600);
                  
                  // Show integrity level with visual indicator
                  setTimeout(() => {
                    const integrityMessage = getIntegrityMessage(data.integrity, consensusPercent);
                    addLogLineWithIntegrity('success', integrityMessage, data.integrity, integrityScore);
                  }, 1000);
                  
                  // Display Claude's response with integrity context
                  setTimeout(() => {
                    const responseData = {
                      analysis: data.response,
                      model: data.metadata.model,
                      tokens: data.metadata.tokens,
                      verificationHash: data.metadata.enhancedProof?.verificationHash
                    };
                    
                    if (data.note) {
                      responseData.consensusNote = data.note;
                    }
                    
                    if (data.clarificationNeeded) {
                      addLogLine('warning', 'CLARIFICATION REQUESTED:', responseData);
                    } else {
                      addLogLine('info', 'SKYLA RESPONSE:', responseData);
                    }
                    
                    setTimeout(() => {
                      addLogLine('info', 'Enhanced state transition complete', {
                        mode: mode, tone: tone, activeProtocols: protocols,
                        identityVector: newVector.map(v => parseFloat(v.toFixed(2))),
                        integrityVerification: 'cryptographically_verified',
                        proofVersion: data.metadata.enhancedProof?.proofVersion || 'v3.0_multi_model_verified'
                      });

                      document.getElementById('submit-btn').disabled = false;
                      document.getElementById('user-input').value = '';
                    }, 600);
                  }, 1400);
                } else {
                  // Fallback handling
                  addLogLine('warning', 'Multi-model processing failed, using local engine only', {
                    error: data.error,
                    fallback: data.fallback
                  });
                  
                  setTimeout(() => {
                    addLogLine('info', 'State transition complete', {
                      mode: mode, tone: tone, activeProtocols: protocols,
                      identityVector: newVector.map(v => parseFloat(v.toFixed(2)))
                    });

                    document.getElementById('submit-btn').disabled = false;
                    document.getElementById('user-input').value = '';
                  }, 800);
                }
              })
              .catch(error => {
                addLogLine('error', 'Network error during multi-model processing', {
                  error: error.message,
                  fallback: 'Local symbolic processing completed successfully'
                });
                
                setTimeout(() => {
                  addLogLine('info', 'State transition complete', {
                    mode: mode, tone: tone, activeProtocols: protocols,
                    identityVector: newVector.map(v => parseFloat(v.toFixed(2)))
                  });

                  document.getElementById('submit-btn').disabled = false;
                  document.getElementById('user-input').value = '';
                }, 800);
              });
            }, 500);
            
            // Helper functions for integrity display
            function getIntegrityMessage(integrity, consensusPercent) {
              switch(integrity) {
                case 'high':
                  return `High integrity consensus achieved (${consensusPercent}% model agreement)`;
                case 'medium': 
                  return `Medium integrity detected (${consensusPercent}% model agreement)`;
                case 'low':
                  return `Low integrity - significant model divergence (${consensusPercent}% agreement)`;
                default:
                  return `Integrity analysis complete (${consensusPercent}% consensus)`;
              }
            }
            
            function addLogLineWithIntegrity(level, message, integrity, score) {
              const consoleBody = document.getElementById('console-body');
              const logLine = document.createElement('div');
              logLine.className = 'log-line';
              
              const integrityClass = `integrity-${integrity}`;
              const consensusWidth = Math.round(score * 100);
              
              const content = `
                <span class="timestamp">${getTimestamp()}</span>
                <span class="log-level ${level}">${level.toUpperCase()}</span>
                <span class="integrity-indicator integrity-${integrity}-bg"></span>
                <span class="log-message ${integrityClass}">${message}</span>
                <span class="consensus-bar">
                  <div class="consensus-fill integrity-${integrity}-bg" style="width: ${consensusWidth}%"></div>
                </span>
              `;
              
              logLine.innerHTML = content;
              consoleBody.appendChild(logLine);
              consoleBody.scrollTop = consoleBody.scrollHeight;
            }

          }, 1200);
        }, 600);
      }, 400);
    }

    // Enter key support
    document.getElementById('user-input').addEventListener('keypress', function (e) {
      if (e.key === 'Enter') processInput();
    });


    // Startup logs + sanity check
    setTimeout(() => {
      addLogLine('success', 'Symbolic engine loaded');
      setTimeout(() => {
        addLogLine('info', 'Identity vector initialized', currentState);
        setTimeout(() => {
          addLogLine('success', 'Multi-model integrity system active');
          setTimeout(() => {
            addLogLine('info', '2-model consensus analysis enabled', {
              models: ['claude-3-haiku', 'claude-3-5-sonnet'],
              architecture: 'efficiency vs quality focused',
              integrityMetrics: ['length', 'sentiment', 'topic', 'tone'],
              verificationLevel: 'cryptographic'
            });
            setTimeout(() => {
              addLogLine('info', 'Ready for symbolic input with true 2-model consensus');
              // Sanity: prove function exists at runtime
              addLogLine('info', 'System status', { 
                typeof_calculateSemanticTransition: typeof calculateSemanticTransition,
                integrityAnalysis: 'enabled'
              });
            }, 400);
          }, 400);
        }, 400);
      }, 300);
    }, 1000);
  </script>

</body>
</html>